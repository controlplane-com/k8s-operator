apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-cm-patcher-sa
  namespace: controlplane

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-cm-patcher-role
  namespace: argocd
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "patch", "update"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-cm-patcher-rb
  namespace: argocd
subjects:
  - kind: ServiceAccount
    name: argocd-cm-patcher-sa
    namespace: controlplane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-cm-patcher-role

---

apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-cm-patcher
  namespace: controlplane
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: argocd-cm-patcher
    spec:
      serviceAccountName: argocd-cm-patcher-sa
      restartPolicy: OnFailure
      containers:
        - name: patcher
          image: bitnami/kubectl:latest
          command: ["sh", "-c"]
          args:
            - |
              CONFIGMAP_NAME=argocd-cm
              NAMESPACE=argocd

              check_configmap_exists() {
                kubectl get configmap "$CONFIGMAP_NAME" -n "$NAMESPACE" >/dev/null 2>&1
              }
              if check_configmap_exists; then
                echo "Patching argocd-cm..."
                # We read the patch from /patch/argocd-patch.yaml (mounted below)
                kubectl patch configmap argocd-cm -n argocd --type=merge --patch "$(cat /patch/argocd-cm-patch.yaml)"
              else
                echo "Nothing to do. It seems ArgoCD isn't installed, or is installed in a non-standard namespace"
              fi
          volumeMounts:
            - name: patch-volume
              mountPath: /patch
      volumes:
        - name: patch-volume
          configMap:
            name: argocd-cm-patch